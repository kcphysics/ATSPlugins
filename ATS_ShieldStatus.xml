<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, May 23, 2014, 9:34 PM -->
<!-- MuClient version 4.84 -->

<!-- Plugin "ATS_ShieldStatus" generated by Plugin Wizard -->

<muclient>
<plugin
   name="ATS_ShieldStatus"
   author="marQon @ATS"
   id="57a49cca2ef1da0b52498a94"
   language="Lua"
   purpose="To visually show shield status"
   date_written="2014-05-23 21:33:22"
   requires="4.84"
   version="1.10"
   save_state="y"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

  <trigger
   enabled="y"
   group="ATS_ShieldStatus"
   match="^Superstructure\s+([-\d]+)%\s+(Patched|Minor|Light|Moderate|Major|Severe|Heavy|Inoperative|Destroyed)([\s&quot;Damage&quot;]*)([\d.]+)$"
   keep_evaluating="y"
   name="damstat_ss"
   regexp="y"
   script="fun_update_ss"
   sequence="100"
  > 
  
    </trigger>
<trigger
   enabled="y"
   group="ATS_ShieldStatus"
   match="^Impulse\sDrive\s+.*\s?Superstructure\s+([\d-]+)%\s+.*\s?[-]{79}$"
   keep_evaluating="y"
   name="engstat_ss"
   regexp="y"
   script="fun_update_ss"
   sequence="100"
  > 
  </trigger>
  
  <trigger
   enabled="y"
   group="ATS_ShieldStatus"
   lines_to_match="12"
   match="^\s+Shield Freq:\s+[\d.\sGHz]+.*\s+[-]{79}\s+System Name\s+Funct Status\s+Specifics\s+[-\s]+Cloaking Device\s+[\d-%]+\s.*\s+Forward shield\s+([\d-]+)%\s.*\s+Starboard shield\s+([\d-]+)%.*\s+Aft shield\s+([\d-]+)%\s.*\s+Port shield\s+([\d-]+)%\s.*\s+Dorsal shield\s+([\d.-]+)%\s.*\s+Ventral\sshield\s+([\d-.]+)%\s.*\s+[-]{79}$"
   multi_line="y"
   name="helmstat_shields1"
   regexp="y"
   script="fun_update_shields"
   sequence="100"
  >

  </trigger>

  <trigger
   enabled="y"
   group="ATS_ShieldStatus"
   match="\[Superstructure:\s+([\d-]+)%\s.*\]$"
   name="damaged_ss"
   regexp="y"
   script="fun_update_ss"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="ATS_ShieldStatus"
   match="^\[.*\]--\[Superstructure (repaired to (\d+)%|repairs complete)\]$"
   name="repaired_ss"
   regexp="y"
   script="fun_update_ss"
   sequence="100"
  >
  </trigger>
	
  <trigger
   enabled="y"
   group="ATS_ShieldStatus"
   match="^(Forward|Starboard|Aft|Port|Dorsal|Ventral)\s+shield\s+([-\d]+)%\s+(Patched|Minor|Light|Moderate|Major|Severe|Heavy|Inoperative|Destroyed)([\s&quot;Damage&quot;]*)([\d.]+)$"
   name="damstat_shields"
   keep_evaluating="y"
   regexp="y"
   script="fun_update_shields"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="ATS_ShieldStatus"
   match="^\[(Forward|Aft|Port|Starboard|Dorsal|Ventral)\s+shield:\s+([\d-]+)%\s+.*\]$"
   name="damaged_shields"
   regexp="y"
   script="fun_update_shields"
   sequence="100"
  >
  </trigger>

  </triggers>
<timers>
  <timer name="ShieldStatus_Updater" enabled="n" second="1.00" offset_second="0.00"    send_to="12"
>
  <send>CallPlugin("74f8c420df7d59ad5aa66246", "Send_GMCP_Packet", "Space.FullUpdate")</send>

  </timer>
</timers>

<!--  Script  -->


<script>
<![CDATA[
require "mw"
require "json"
GMCPID = "74f8c420df7d59ad5aa66246"

ShieldStatus = { ["Forward"] = 1.0, ["Starboard"] = 1.0, ["Aft"] = 1.0, ["Port"] = 1.0, ["Dorsal"] = 1.0, ["Ventral"] = 1.0, ["SS"] = 1.0, ["Name"] = nil, ["Mode"] = "Unknown", ["Pitch"] = 0.0, ["Yaw"] = 0.0, ["Speed"] = 0.0, ["Velocity"] = 0.0, ["Class"] = "Unknown" }
ShieldPriority = { ["Forward"] = 0, ["Starboard"] = 0, ["Aft"] = 0, ["Port"] = 0, ["Dorsal"] = 0, ["Ventral"] = 0, ["SS"] = 0, ["RepCapRate"] = 0 }
debugmode = false

function Debug(t, ...)
  if not debugmode or not t then 
    return 
  end
  Note("DEBUG: " .. string.format(t,...))
end

function OnPluginBroadcast (msg, id, name, text)
 if (id == "74f8c420df7d59ad5aa66246" ) then  -- GMCP_handler
 -- pull out GMCP message, plus the data belonging to it
   message, params = string.match (text, "([%a.]+)%s+(.*)")
  
   -- no match? oops!
   if not message then
      return
   end -- if
   
   if (message == "console.unman") then -- Turn off timer when not manning a console
     EnableTimer("ShieldStatus_Updater", false);
    WindowFilter (win, 0, 0,  WINDOW_WIDTH, WINDOW_HEIGHT, 25, 0) -- blur both directions
   elseif (message == "console.man") then
     EnableTimer("ShieldStatus_Updater", true);
     UpdateDisplay()
   end
  
   if (message ~= "shield.status") then -- We only care about shields
     return
   end
   
   -- ensure we have an array or object
   if not string.match (params, "^[%[{]") then
      params =  "[" .. params .. "]"  -- JSON hack, make msg first element of an array.
   end -- if 
   
   -- decode it
   result = assert (json.decode (params))
   if (result["fore"]) then
    ShieldStatus.Forward = result["fore"]
   end
   if (result["star"]) then
    ShieldStatus.Starboard = result["star"]
   end
   if (result["aft"]) then 
     ShieldStatus.Aft = result["aft"]
   end
   if (result["port"]) then
     ShieldStatus.Port = result["port"]
   end
   if (result["dors"]) then
     ShieldStatus.Dorsal = result["dors"]
   end
   if (result["vent"]) then
     ShieldStatus.Ventral = result["vent"]
   end
   if (result["ss"]) then
     ShieldStatus.SS = result["ss"]
   end
   if (result["name"]) then
     ShieldStatus.Name = result["name"]
   end
   if (result["class"]) then
     ShieldStatus.Class = result["class"]
   end
   if (result["vel"]) then
    ShieldStatus.Velocity = result["vel"]
   end
   if (result["speed"]) then
     ShieldStatus.Speed = result["speed"]
   end
   if (result["yaw"]) then
     ShieldStatus.Yaw = result["yaw"]
   end
   if (result["pitch"]) then
     ShieldStatus.Pitch = result["pitch"]
   end
   
    if (result["pri_fore"]) then
    ShieldPriority.Forward = result["pri_fore"]
   end
   if (result["pri_star"]) then
    ShieldPriority.Starboard = result["pri_star"]
   end
   if (result["pri_aft"]) then 
     ShieldPriority.Aft = result["pri_aft"]
   end
   if (result["pri_port"]) then
     ShieldPriority.Port = result["pri_port"]
   end
   if (result["pri_dors"]) then
     ShieldPriority.Dorsal = result["pri_dors"]
   end
   if (result["pri_vent"]) then
     ShieldPriority.Ventral = result["pri_vent"]
   end
   if (result["pri_ss"]) then
     ShieldPriority.SS = result["pri_ss"]
   end
   if (result["repcap_rate"]) then
	 ShieldPriority.RepCapRate = result["repcap_rate"]
	end
	
   UpdateDisplay()

   end
 end
-- Forward, Starboard, Aft, Port, Dorsal, Ventral
function fun_update_shields(name, _, wildcards)
  
  if (name == "helmstat_shields1" or name == "helmstat_shields2") then -- From helm stats
    for i = 1, #wildcards do -- Turns wildcards into numbers, makes sure they aren't null.
      wildcards[i] = tonumber(wildcards[i])
      if not i then
        return
      end
      
    end
    ShieldStatus.Forward = wildcards[1]/100
    ShieldStatus.Starboard = wildcards[2]/100
    ShieldStatus.Aft = wildcards[3]/100
    ShieldStatus.Port = wildcards[4]/100
    ShieldStatus.Dorsal = wildcards[5]/100
    ShieldStatus.Ventral = wildcards[6]/100
    UpdateDisplay()
    return
    
  else  -- Damstat or from damage received. Wildcards[1] should be name, wildcards[2] should be percentage
    
    local i = tonumber(wildcards[2])
    
    if (wildcards[1] == "Forward") then
      ShieldStatus.Forward = i/100
    elseif (wildcards[1] == "Starboard") then
      ShieldStatus.Starboard = i/100
    elseif (wildcards[1] == "Aft") then
      ShieldStatus.Aft = i/100
    elseif (wildcards[1] == "Port") then
      ShieldStatus.Port = i/100
    elseif (wildcards[1] == "Ventral") then
      ShieldStatus.Ventral = i/100
    elseif (wildcards[1] == "Dorsal") then
      ShieldStatus.Dorsal = i/100
    end
    UpdateDisplay()
  end
end

function fun_update_ss(name, _, wildcards)
  local i = 100
  
  if (name == "repaired_ss") then -- If we pass 2 arguments, its repaired to a percentage, else it's fully repaired.
    if(wildcards[2]) then
      i = tonumber(wildcards[2]) or 100
    end
    ShieldStatus.SS = i/100
    UpdateDisplay()
    Debug("SS: ".. i)
    return
  else
    i = tonumber(wildcards[1])
    if not i then 
      return
    end
    ShieldStatus.SS = i/100
    UpdateDisplay()
    Debug("SS: ".. i)
  end
end
 
  function fun_shieldstatus(_,_,_)
    return string.format("For: %d%%, Star: %d%%, Aft: %d%%, Port: %d%%, Dors: %d%%, Vent: %d%%, SS: %d%%", ShieldStatus.Forward*100, ShieldStatus.Starboard*100, ShieldStatus.Aft*100, ShieldStatus.Port*100,ShieldStatus.Dorsal*100, ShieldStatus.Ventral*100, ShieldStatus.SS*100)
  end

function fun_reset()
  
  for i,v in pairs(ShieldStatus) do
    ShieldStatus[i] = 1.0
  end
  UpdateDisplay()
  
  Debug("Shields/SS Reset.")
end

function fun_shield_repaired(name,_,wildcards)
  local percent = 1.0
  
  if (#wildcards == 2) then -- 2 wildcards means we got percentage, otherwise it's a full repair
    percent = tonumber(wildcards[2]) 
  end
    
  if not percent then
    percent = 1.0
  else
    percent = percent / 100
  end
  
  local lowest = 1.0
  local lowname = nil
    for i, v in pairs(ShieldStatus) do
      if (v < lowest and v <= percent and math.abs(percent - v) <= 0.2) then -- Lower than previous low, less than or equal to percent, and the difference is not greater than 0.2
        lowest = v
        lowname = i
      end
    end
    if (not lowname) then -- We didn't find the lowest obvious shield, lets try just adding 20% (Maxrepcap) to each shield and see if we hit paydirt.
      for i, v in pairs(ShieldStatus) do
        if (math.abs(v - percent) == 0.2) then
          ShieldStatus[i] = percent
          Debug("Found shield by repair: " .. i)
          UpdateDisplay()
          return
        end
      end
    else
      ShieldStatus[lowname] = percent
      Debug("Found shield by repair: " .. lowname)
      UpdateDisplay()

      return
    end
  end
  
  
  
--[[
-- Below this line is a modified version of Nick Gammon's Health_Bar_Miniwindow.xml
-- Modified for our own usage.
--]]

GAUGE_LEFT = 80
GAUGE_HEIGHT = 15

WINDOW_WIDTH = 260
WINDOW_HEIGHT = 215
NUMBER_OF_TICKS = 4

BACKGROUND_COLOR = ColourNameToRGB("black")
FONT_COLOR = ColourNameToRGB("orange")
BORDER_COLOR = ColourNameToRGB("#553333")
FONT2_COLOR = ColourNameToRGB("white")
STATUS_COLOR = ColourNameToRGB("lightsteelblue")
STATUS_COLOR2 = ColourNameToRGB("lime")
VEL_COLOR = ColourNameToRGB("yellow")

function mousedown(flags, hotspot_id)

  -- find where mouse is so we can adjust window relative to mouse
  startx, starty = WindowInfo (win, 14), WindowInfo (win, 15)
  
  -- find where window is in case we drag it offscreen
  origx, origy = WindowInfo (win, 10), WindowInfo (win, 11)
end -- mousedown

function dragmove(flags, hotspot_id)

  -- find where it is now
  local posx, posy = WindowInfo (win, 17),
                     WindowInfo (win, 18)

  -- move the window to the new location
  WindowPosition(win, posx - startx, posy - starty, 0, 2);
  
  -- change the mouse cursor shape appropriately
  if posx < 0 or posx > GetInfo (281) or
     posy < 0 or posy > GetInfo (280) then
    check (SetCursor ( 11))   -- X cursor
  else
    check (SetCursor ( 1))   -- hand cursor
  end -- if
  
end -- dragmove

function dragrelease(flags, hotspot_id)
  local newx, newy = WindowInfo (win, 17), WindowInfo (win, 18)
  
  -- don't let them drag it out of view
  if newx < 0 or newx > GetInfo (281) or
     newy < 0 or newy > GetInfo (280) then
     -- put it back
    WindowPosition(win, origx, origy, 0, 2);
  end -- if out of bounds
  
end -- dragrelease


function DoGauge (sPrompt, Fraction)
  local Percent = Fraction -- We do this just incase it's a negative number, we can print it.
  local Background = BACKGROUND_COLOR
  
  if Fraction > 1 then Fraction = 1 end
  if Fraction < 0 then Fraction = 0 end
  
  Color = (Fraction > 0.5 and ColourNameToRGB("green") or ColourNameToRGB("red")) 
  
  local width = WindowTextWidth (win, font_id, sPrompt)

if (Fraction > 0.5 ) then
	Background = ColourNameToRGB("yellow")
  elseif (Fraction > 0.0 and Fraction < 0.5) then
	Background = ColourNameToRGB("red")
end

  WindowText (win, font_id, sPrompt,
                             GAUGE_LEFT - width, vertical, 0, 0, FONT_COLOR)

  WindowRectOp (win, 2, GAUGE_LEFT, vertical, WINDOW_WIDTH -5 , vertical + GAUGE_HEIGHT, 
                          Background)  -- fill entire box
 
    
  local gauge_width = (WINDOW_WIDTH - GAUGE_LEFT - 5) * Fraction
  
   -- box size must be > 0 or WindowGradient fills the whole thing 
  if math.floor (gauge_width) > 0 then
    
    -- top half
    WindowGradient (win, GAUGE_LEFT, vertical, GAUGE_LEFT + gauge_width, vertical + GAUGE_HEIGHT / 2, 
                    0x000000,
                    Color, 2) 
    
    -- bottom half
    WindowGradient (win, GAUGE_LEFT, vertical + GAUGE_HEIGHT / 2, 
                    GAUGE_LEFT + gauge_width, vertical +  GAUGE_HEIGHT,   
                    Color,
                    0x000000,
                    2) 

  end -- non-zero
  
  -- show ticks
  local ticks_at = (WINDOW_WIDTH - GAUGE_LEFT - 5) / (NUMBER_OF_TICKS + 1)
  
  -- ticks
  for i = 1, NUMBER_OF_TICKS do
    WindowLine (win, GAUGE_LEFT + (i * ticks_at), vertical, 
                GAUGE_LEFT + (i * ticks_at), vertical + GAUGE_HEIGHT, ColourNameToRGB ("silver"), 0, 1)
  end -- for

  -- draw a box around it
  check (WindowRectOp (win, 1, GAUGE_LEFT, vertical, WINDOW_WIDTH - 5, vertical + GAUGE_HEIGHT, 
          ColourNameToRGB ("lightgrey")))  -- frame entire box
  if (Percent == -1.0) then
    WindowText(win, font_id, Percent*100 .. "%" .. " (Dest)", GAUGE_LEFT + 5, vertical, 0, 0, FONT2_COLOR) -- Draw's our percentage
  elseif (Percent < 0.0 and Percent > -1.0) then
    WindowText(win, font_id, Percent*100 .. "%" .. " (Inop)", GAUGE_LEFT + 5, vertical, 0, 0, FONT2_COLOR) -- Draw's our percentage
  else
    WindowText(win, font_id, Percent*100 .. "%", GAUGE_LEFT + 5, vertical, 0, 0, FONT2_COLOR) -- Draw's our percentage
  end
  
  vertical = vertical + font_height + 3
end -- function

function UpdateDisplay()

  
  -- fill entire box to clear it
  check (WindowRectOp (win, 2, 0, 0, 0, 0, BACKGROUND_COLOR))  -- fill entire box
  
  -- Edge around box rectangle
  check (WindowCircleOp (win, 3, 0, 0, 0, 0, BORDER_COLOR, 0, 2, 0, 1))
  vertical = 6
  local offset = 5
  if(ShieldStatus.Name == nil or #ShieldStatus.Name <= 1) then
    WindowText(win, font_id, "Please man a console", offset, vertical, 0, 0, STATUS_COLOR2)
    vertical = vertical + font_height +3
    WindowText(win, font_id, " or type a space command to", offset, vertical, 0, 0, STATUS_COLOR2)
    vertical = vertical + font_height +3
    WindowText(win, font_id, "update data.", offset, vertical, 0, 0, STATUS_COLOR2)
    WindowShow (win, true)
    return
  end
  
  WindowText(win, font_id, "Ship: ", offset, vertical, 0, 0, STATUS_COLOR2)
  WindowText(win, font_id, ShieldStatus.Name, offset + (font_width * string.len("Ship: ")), vertical, 0, 0, STATUS_COLOR)
  vertical = vertical + font_height + 3
  
  WindowText(win, font_id, "Class: ", offset, vertical, 0, 0, STATUS_COLOR2)
  WindowText(win, font_id, ShieldStatus.Class, offset + (font_width * string.len("Class: ")), vertical, 0, 0, STATUS_COLOR)
  vertical = vertical + font_height + 3
  WindowText(win, font_id, "Heading: ", offset, vertical, 0, 0, STATUS_COLOR2)
  WindowText(win, font_id, ShieldStatus.Yaw .. " / " .. ShieldStatus.Pitch, offset + (font_width * string.len("Heading:  ")), vertical, 0, 0, STATUS_COLOR)
  vertical = vertical + font_height + 3
  WindowText(win, font_id, "Spd" , offset, vertical, 0, 0, STATUS_COLOR2)
  WindowText(win, font_id, " - " , offset + (font_width * string.len("Spd ")), vertical, 0, 0, STATUS_COLOR)
  WindowText(win, font_id, "Vel:" , offset + (font_width * string.len("Spd  - ")), vertical, 0, 0, VEL_COLOR)
  
  if (ShieldStatus.Speed == 0) then
    WindowText(win, font_id, "  Stationary", offset + (font_width * string.len("Spd - Vel: ")), vertical, 0, 0, STATUS_COLOR)
  else
    local s
    if (ShieldStatus.Speed >= 1.0 or ShieldStatus.Speed <= -1.0) then
      s = " w" .. ShieldStatus.Speed
    else
      s = " " .. ShieldStatus.Speed * 100 .. "%"
    end
    local v
    if (ShieldStatus.Velocity:find("%[")) then
      v = ShieldStatus.Velocity .. " PC/s"
    else
      v = ShieldStatus.Velocity .. " SU/s"
    end
    
    WindowText(win, font_id, s .. " ", offset + (font_width * string.len("Spd - Vel: ")), vertical, 0, 0, STATUS_COLOR)
    WindowText(win, font_id, v, offset + (font_width * (string.len("Spd - Vel: ") + #s + 4)), vertical, 0, 0, VEL_COLOR)
  end
  
  vertical = vertical + font_height + 5 -- pixel to start at

  DoGauge ("(" .. ShieldPriority.Forward .. ") " .. "Fore: ", ShieldStatus.Forward)
  DoGauge ("(" .. ShieldPriority.Starboard .. ") " .. "Star: ", ShieldStatus.Starboard)
  DoGauge ("(" .. ShieldPriority.Aft .. ") " .. "Aft: ", ShieldStatus.Aft)
  DoGauge ("(" .. ShieldPriority.Port .. ") " .. "Port: ",ShieldStatus.Port)
  DoGauge ("(" .. ShieldPriority.Ventral .. ") " .. "Vent: ",ShieldStatus.Ventral)
  DoGauge ("(" .. ShieldPriority.Dorsal .. ") " .. "Dors: ", ShieldStatus.Dorsal)
  DoGauge ("(" .. ShieldPriority.SS .. ") " .. "SS: ", ShieldStatus.SS)
  WindowShow (win, true)
  
end -- draw_bar

function OnPluginConnect ()
fun_reset()
end -- function

function OnPluginInstall ()
  
  if (IsPluginInstalled(GMCPID)) then
    ColourNote("orange", "", "ATS_ShieldStatus (GMCP-Aware) v" .. GetPluginInfo(GetPluginID(),19) .. " loaded.")
    EnableTriggerGroup("ATS_ShieldStatus", true) -- Still use the trigger group, for damage, etc.
    CallPlugin(GMCPID, "Send_GMCP_Packet", "Space.FullUpdate")
  else
    ColourNote("orange", "", "Attempting to load GMCP Handler...")
       local finfo = utils.info()
       local plugin_folder = finfo["plugins_directory"]
    if (LoadPlugin (plugin_folder .. "/" .. "GMCP_Handler.xml") == error_code.eOK) then
      ColourNote("orange", "", "Success! Now loading Shield status plugin..")
      EnableTriggerGroup("ATS_ShieldStatus", true)
    else
      ColourNote("orange", "", "Error loading GMCP Handler. Please run Qupdate or re-install shield status plugin using qinstall.")
      EnableTriggerGroup("ATS_ShieldStatus", false)
    return
  end
end
    
  win = GetPluginID ()
  font_id = "fn"
  
  font_name = "Verdana"    -- the actual font

  local x, y, mode, flags = 
      tonumber (GetVariable ("windowx")) or 0,
      tonumber (GetVariable ("windowy")) or 0,
      tonumber (GetVariable ("windowmode")) or 8, -- bottom right
      tonumber (GetVariable ("windowflags")) or 0
    
  -- make miniwindow so I can grab the font info
  check (WindowCreate (win, 
                 x, y, WINDOW_WIDTH, WINDOW_HEIGHT,  
                 mode,   
                 flags,   
                 BACKGROUND_COLOR) )

  -- make a hotspot
  WindowAddHotspot(win, "hs1",  
                   0, 0, 0, 0,   -- whole window
                   "",   -- MouseOver
                   "",   -- CancelMouseOver
                   "mousedown",
                   "",   -- CancelMouseDown
                   "",   -- MouseUp
                   "Drag to move",  -- tooltip text
                   1, 0)  -- hand cursor
                   
  WindowDragHandler(win, "hs1", "dragmove", "dragrelease", 0) 
                 
  check (WindowFont (win, font_id, font_name, 9, false, false, false, false, 0, 0))  -- normal
  
  font_height = WindowFontInfo (win, font_id, 1)  -- height
  font_width = WindowFontInfo (win, font_id, 6)
  UpdateDisplay()
  
  if GetVariable ("enabled") == "false" then
    ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
    check (EnablePlugin(GetPluginID (), false))
    return
  end -- they didn't enable us last time
 
end -- OnPluginInstall

function OnPluginDisable ()
  WindowShow (win, false)
end -- OnPluginDisable

function OnPluginSaveState ()
  SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID (), 17)))
  SetVariable ("windowx", tostring (WindowInfo (win, 10)))
  SetVariable ("windowy", tostring (WindowInfo (win, 11)))
  SetVariable ("windowmode", tostring (WindowInfo (win, 7)))
  SetVariable ("windowflags", tostring (WindowInfo (win, 8)))
end -- OnPluginSaveState


]]>
</script>


</muclient>
